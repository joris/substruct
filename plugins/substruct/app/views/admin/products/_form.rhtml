<%= error_messages_for 'product' %>


<!-- 
	PRODUCT AND VARIATIONS ######################################################
-->
<div class="padLeft">
	<h2>Standard Product</h2>
	<div class="padLeft">
		<div class="float">
			<%= make_label('Name', true) %>
			<%= text_field 'product', 'name', :class => 'textInput', :size => 35  %>
		</div>
		<div class="float">
			<%= make_label('Product Code', true) %>
			<%= text_field 'product', 'code', :class => 'textInput', :size => 20 %>
		</div>
		<div class="float">
			<%= make_label('Price') %>
			<%= text_field 'product', 'price', :class => 'textInput numeric', :size => 6, :original_value => @product.price  %>
		</div>
		<div class="float">
			<%= make_label('Quantity') %>
			<%= text_field 'product', 'quantity', :class => 'textInput numeric', :size => 6, :disabled => @product.variations.size > 0  %>
		</div>
		<div class="clear"></div>
		<% if @product.variations.size > 0 %>
			<div class="hlt" style="padding:10px; text-align:center;">
				Variations will use price set for the base product by default unless otherwise specified.
			</div>
		<% end %>

	</div>

	<!-- PRODUCT VARIATIONS -->

	<h2>Variations</h2>

	<div class="padLeft">

		<div id="variation_container">
			<!-- filled with variations -->
			<%= render :partial => 'variation', :collection => @product.variations %>
		</div>
	
		<p>
			<%= 
				link_to_remote 'Add product variation',
		    	{
						:url => { :action => "add_variation_ajax" },
						:loading => "$('add_variation_link').hide(); $('add_variation_indicator').show();",
		    		:complete => "PRODUCT.set_and_color_boxes(); $('add_variation_link').show(); $('add_variation_indicator').hide();",
					},
					:class => 'action',
					:id => 'add_variation_link'
			%>
			<%= image_tag("/indicator.gif", :plugin => 'substruct', :style => 'display:none;', :id => "add_variation_indicator") %>
		</p>
		<br/>
	</div>

</div>

<!-- 
	DETAILS #####################################################################
-->

<h1>Details</h1>

<div class="padLeft">
	<div class="float" style="width:230px;">
	
		<p>
			<label>
				<%= check_box('product', 'is_discontinued', :class => 'inline') %> 
				Product is discontinued
			</label>
			<span class="info">
				Discontinued products will continue to show on the site until there are no more in stock.
			</span>
		</p>
	
		<p>
			<%= make_label('Date available') %>
			<%= date_select 'product', 'date_available'  %>
		</p>

		<div class="float">
			<p>
				<%= make_label('Width') %>
				<%= text_field 'product', 'size_width', :size => '10', :class => 'textInput'  %>
				<br/>
				<span class="info">(inches)</span>
			</p>
			<p>
				<%= make_label('Depth') %>
				<%= text_field 'product', 'size_depth', :size => '10', :class => 'textInput'  %>
				<br/>
				<span class="info">(inches)</span>
			</p>
		</div>

		<div class="float">
			<p>
				<%= make_label('Height') %>
				<%= text_field 'product', 'size_height', :size => '10', :class => 'textInput'  %>
				<br/>
				<span class="info">(inches)</span>
			</p>
			<p>
				<%= make_label('Weight') %>
				<%= text_field 'product', 'weight', :size => '10', :class => 'textInput'  %>
				<br/>
				<span class="info">(pounds)</span>
			</p>
		</div>
		<div class="clear">&nbsp;</div>
	
	</div>

	<div class="float">
		<p>
			<label for="product_description">Description</label>
			<span class="info">
		    HTML and <a href="http://hobix.com/textile/" target="_blank">Textile</a> markup is allowed here.
		  </span>
			<br/>
			<%= text_area 'product', 'description', :rows => 14, :class => 'textArea'  %>
		</p>
	</div>

	<div class="clear">&nbsp;</div>
</div>

<%= render :partial => 'image_upload' %>

<br/>
<div class="line">&nbsp;</div>

<%= render :partial => 'product_upload' %>

<br/>
<div class="line">&nbsp;</div>

<script type="text/javascript">
  var PRODUCT = {
    variation_boxes: null,
    original_price: 0,
    set_variation_boxes: function() {
      PRODUCT.variation_boxes = $$("input[name='variation[][price]']");
    },
    // Watches product price box.
    // When value of price changes, it changes price of all variations 
    // that equal the original value.
    change_price: function() {
      var p_input = $('product_price')
      var price = p_input.value;
      PRODUCT.variation_boxes.each(function(box){
        box_price = box.value;
        box_orig = parseFloat(box.getAttribute('original_value'), 10);
        if (box_orig == parseFloat(PRODUCT.original_price,10) || box_orig == 0.0) {
          box.value = price;
        };
      });
      PRODUCT.color_variation_boxes;
    },
    // Marks variation boxes with same price as original,
    // and ones that differ.
    color_variation_boxes: function() {
      var p_input = $('product_price')
      var price = parseFloat(p_input.value,10);
      PRODUCT.variation_boxes.each(function(box){
        box_price = parseFloat(box.value, 10);
        if (price == box_price) {
          box.style.color = '#999999';
          box.style.backgroundColor = '#eee';
        } else {
          box.style.color = '';
          box.style.backgroundColor = '';
        }
      });
    },
    // Shortcut
    set_and_color_boxes: function() {
      PRODUCT.set_variation_boxes();
      PRODUCT.change_price();
      PRODUCT.color_variation_boxes();
      PRODUCT.observe_boxes();
    },
    // Observes variations and recolors them if they differ from the norm.
    // Kind of inefficient scripting wise, but we probably aren't
    // dealing with products that have 100's of variations.
    observe_boxes: function() {
      PRODUCT.variation_boxes.each(function(box){
        Event.observe(box, 'keyup', PRODUCT.color_variation_boxes);
      });
    },
    // Adds event handlers to variation boxes
    init: function() {
      PRODUCT.original_price = $('product_price').getAttribute('original_value');
      Event.observe($('product_price'), 'keyup', PRODUCT.change_price);
      PRODUCT.set_and_color_boxes();
      PRODUCT.observe_boxes();
    }
  };
  PRODUCT.init();
</script>